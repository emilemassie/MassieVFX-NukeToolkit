set cut_paste_input [stack 0]
push $cut_paste_input
NoOp {
 name CornerPinPlus
 tile_color 0x8000ffff
 note_font "DejaVu Sans Bold"
 note_font_color 0xffffffff
 selected true
 xpos -305
 ypos 321
 addUserKnob {20 tab l Info t "The fact you hovered here to see this tooltip is the proof you are one of the good ones."}
 addUserKnob {26 info_text l " " T "<i>First, please connect this node to a cornerpin node <br>\nThen, press the button to add <b>ADVANCED</b> controls !!!</i>"}
 addUserKnob {26 ""}
 addUserKnob {22 python_button l "<b>Make CornerPin Plus !!!</b>" -STARTLINE T "def CornerPinPlus(node):\n    '''\n        This takes takes the selected node (checks of it's a corner pin) and add functionnalities to it.\n        Mainly reference frame, auto set to bbox and more.\n    \n    '''\n    import nuke\n    try :\n        if node.Class() == \"CornerPin2D\":\n            ref_frame = nuke.frame()\n            try:\n                node\['advanced_tab'].name()\n            except:\n                autopinScript = \"\"\"\n\nnode=nuke.thisNode()\n\nnode\['selected'].setValue(True)\nnode\['disable'].setValue(True)\n\nautocropper = nuke.createNode(\"CurveTool\",'''operation 0 ROI \{0 0 input.width input.height\} Layer alpha label \"Processing Crop...\" selected true''', False)\n\n# Execute the CurveTool node for the frame.\nnuke.executeMultiple(\[autocropper,], (\[nuke.frame(), nuke.frame(), 1],))\n\n# Get the data\nautocropbox = autocropper.knob(\"autocropdata\").getValue()\n\n# Leave no traces\nnuke.delete(autocropper)\n\n# Copy The data into the CornerPin\n\nnode\['from1'].setValue(\[autocropbox\[0],autocropbox\[1]], nuke.frame())\nnode\['from2'].setValue(\[autocropbox\[2],autocropbox\[1]], nuke.frame())\nnode\['from3'].setValue(\[autocropbox\[2],autocropbox\[3]], nuke.frame())\nnode\['from4'].setValue(\[autocropbox\[0],autocropbox\[3]], nuke.frame())\n\nnode\['to1'].setValue(\[autocropbox\[0],autocropbox\[1]], nuke.frame())\nnode\['to2'].setValue(\[autocropbox\[2],autocropbox\[1]], nuke.frame())\nnode\['to3'].setValue(\[autocropbox\[2],autocropbox\[3]], nuke.frame())\nnode\['to4'].setValue(\[autocropbox\[0],autocropbox\[3]], nuke.frame())\n\nnode\['selected'].setValue(True)\nnode\['disable'].setValue(False)\n\"\"\"\n\n\n\n                initKeysScript = '''\n\nnode=nuke.thisNode()\n\n# Set Keys on the initial frame\n\nfor knob in \[node\['from1'],node\['from2'],node\['from3'],node\['from4'],node\['to1'],node\['to2'],node\['to3'],node\['to4']]:\n    knob.setKeyAt(nuke.frame())\n\n\n'''\n\n                node.addKnob(nuke.Tab_Knob('advanced_tab', 'ADVANCED'))\n                node.addKnob(nuke.Int_Knob('rframe', 'Reference frame : '))\n                node.addKnob(nuke.PyScript_Knob('setFrameButton', 'set to current frame', '''nuke.thisNode()\['rframe'].setValue(nuke.frame())'''))\n                node.addKnob(nuke.Text_Knob('',''))\n\n                node.addKnob(nuke.nuke.PyScript_Knob('autopin', 'AutoPin', autopinScript))\n                node.addKnob(nuke.nuke.PyScript_Knob('autopin', 'Set Initial Keys', initKeysScript))\n                \n            node\['from1'].setExpression('to1(rframe)')\n            node\['from2'].setExpression('to2(rframe)')\n            node\['from3'].setExpression('to3(rframe)')\n            node\['from4'].setExpression('to4(rframe)')\n            node\['rframe'].setValue(ref_frame)\n            node\['label'].setValue('\[value rframe]')\n\n        else:\n            nuke.message('The selected node is not a CornerPin2D')\n    except:\n        nuke.message('Please select a CornerPin2D')\n\nCornerPinPlus(nuke.thisNode().input(0))"}
}
